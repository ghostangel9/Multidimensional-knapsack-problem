import numpy as np
#引用numpy包，存储和处理矩阵
from pulp import LpProblem, LpVariable, LpConstraint, LpConstraintLE, LpConstraintGE, LpMaximize, LpBinary, LpStatus,LpInteger
#引用pulp包，线性规划

##First************************************************************************************************************************************************
def dynamic1():####定义一个函数
    min_coe_z = - np.array([100, 600, 1200, 2400, 500, 2000])####每个背包的价值
    # 有6个背包，对应每个背包的属性
    coe_st_ub = np.array([[8, 12, 13, 64, 22, 41], [8, 12, 13, 75, 22, 41], [3, 6, 4, 18, 6, 4], [5, 10, 8, 32, 6, 12],
                          [5, 13, 8, 42, 6, 20], [5, 13, 8, 48, 6, 20], [0, 0, 0, 0, 8, 0], [3, 0, 4, 0, 8, 0],
                          [3, 2, 4, 0, 8, 4], [3, 2, 4, 8, 8, 4], [1, 1, 1, 1, 1, 1],[100, 600, 1200, 2400, 500, 2000]])
    # 背包的约束条件
    value_st_ub = np.array([80, 96, 20, 36, 44, 48, 10, 18, 22, 24, 6,3800])
    # 建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 因为有6个背包，所以设6个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    #设置12个方程
    a=['c0','c1','c2','c3','c4','c5','c6','c7','c8','c9','10','c11']
    #设置一个循环，分别计算每个方程
    for i in range(0,len(coe_st_ub)):
        data=coe_st_ub[i]
        print(data)
        aa=a[i]
        m += LpConstraint(e=(data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5]), sense=LpConstraintLE, rhs=value_st_ub[i],
                      name=aa)
        print(m)
        #m为方程的解
    m.setObjective(-min_coe_z[0]*x1-min_coe_z[1]*x2-min_coe_z[2]*x3-min_coe_z[3]*x4-min_coe_z[4]*x5-min_coe_z[5]*x6)
    # 求m的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())

#Second*********************************************************************************************************************************************
def dynamic2():
    min_coe_z = - np.array([600.1, 310.5, 1800 ,3850 ,18.6 ,198.7 ,882 ,4200 ,402.5 ,327])
    # 每个背包的价值
    #设置12个数组，对应每个背包的属性、价值和方程的初始值
    coe_st_ub = np.array([[20 ,5 ,100,200 ,2 ,4 ,60, 150, 80, 40],[20, 7 ,130 ,280 ,2, 8, 110, 210 ,100, 40],
                          [60,3 ,50 ,100 ,4 ,2, 20, 40, 6, 12],[60 ,8, 70 ,200 ,4 ,6 ,40 ,70, 16 ,20],
                          [60, 13, 70 ,250, 4 ,10 ,60 ,90 ,20 ,24],[60, 13, 70 ,280, 4, 10, 70 ,105 ,22 ,28],
                          [5,2, 20, 100, 2, 5 ,10 ,60, 0, 0],[45, 14 ,80, 180, 6 ,10, 40, 100, 20, 0],
                          [55 ,14, 80, 200, 6 ,10 ,50, 140, 30,40 ],[65,14,80,220,6,10,50,180,30,50 ],
                          [600.1, 310.5, 1800 ,3850 ,18.6 ,198.7 ,882 ,4200 ,402.5 ,327],[1,1,1,1,1,1,1,1,1,1]])
    # 约束条件
    value_st_ub = np.array([450, 540 ,200 ,360, 440, 480 ,200 ,360 ,440, 480,8706.1,10])
    # 建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有10个背包，设10个未知数
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    #建立12个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', '10', 'c11']
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5]+x7*data[6]+x8*data[7]+x9*data[8]+x10*data[9]),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
        print(m)
    #求输出价值的最小最大值
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6-min_coe_z[6]*x7-min_coe_z[7]*x8-min_coe_z[8]*x9-min_coe_z[9]*x10)
    status = m.solve()

    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())

#Third***********************************************************************************************************************************************
def dynamic3():
    # 根据题意设置每个背包的价值
    min_coe_z = - np.array([100, 220, 90 ,400 ,300, 400, 205, 120, 160, 580, 400, 140, 100 ,1300, 650])
    # 设置12个数组，10个是属性，1个是价值，1个是变量的初始值
    coe_st_ub = np.array([ [8 ,24 ,13, 80 ,70, 80, 45 ,15 ,28 ,90, 130, 32, 20, 120 ,40],[8, 44, 13 ,100 ,100 ,90 ,75 ,25 ,28 ,120, 130 ,32, 40, 160, 40],
                           [3 ,6 ,4 ,20, 20, 30, 8, 3 ,12 ,14, 40, 6 ,3, 20, 5],[5, 9, 6, 40, 30 ,40 ,16, 5 ,18, 24 ,60, 16 ,11, 30 ,25],
                           [5 ,11 ,7 ,50, 40, 40, 19, 7 ,18 ,29 ,70 ,21, 17 ,30, 25],[ 5 ,11, 7 ,55, 40, 40, 21, 9 ,18, 29 ,70, 21, 17, 35 ,25],
                           [0, 0, 1, 10 ,4 ,10 ,0, 6 ,0 ,6, 32, 3, 0, 70, 10],[3, 4 ,5 ,20, 14, 20, 6 ,12, 10 ,18, 42, 9 ,12 ,100, 20],
                           [3 ,6, 9 ,30 ,29, 20, 12, 12 ,10, 30 ,42 ,18, 18, 110, 20],[3 ,8 ,9 ,35 ,29, 20 ,16, 15 ,10, 30, 42, 20 ,18, 120, 20],
                           [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[100, 220, 90 ,400 ,300, 400, 205, 120, 160, 580, 400, 140, 100 ,1300, 650]])
    #建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有15个背包，定义15个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    x11 = LpVariable("x11", lowBound=0, cat=LpInteger)
    x12 = LpVariable("x12", lowBound=0, cat=LpInteger)
    x13 = LpVariable("x13", lowBound=0, cat=LpInteger)
    x14 = LpVariable("x14", lowBound=0, cat=LpInteger)
    x15 = LpVariable("x15", lowBound=0, cat=LpInteger)
    #有12个数组，定义12个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', '10', 'c11']
    # 约束条件
    value_st_ub=[550, 700, 130 ,240 ,280 ,310 ,110, 205, 260 ,275,15,4015]
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(
        data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5] + x7 * data[6] + x8 *
        data[7] + x9 * data[8] + x10 * data[9]+x11*data[10]+x12*data[11]+x13*data[12]+x14*data[13]+x15*data[14]),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
    print(m)
    #方程解
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6 - min_coe_z[6] * x7 - min_coe_z[7] * x8 - min_coe_z[8] * x9 - min_coe_z[9] * x10-min_coe_z[10]*x11-
        min_coe_z[11]*x12-min_coe_z[12]*x13-min_coe_z[13]*x14-min_coe_z[14]*x15)
    #方程解的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())


#Fourth***********************************************************************************************************************************************
def dynamic4():
#定义一个类
    min_coe_z = - np.array([100, 220,90 ,400 ,300, 400, 205, 120, 160 ,580 ,400, 140 ,100 ,1300, 650,320, 480, 80, 60, 2550 ])
    # 设置每一个背包的价值
    #设置一个矩阵，有12行
    coe_st_ub = np.array([[8,24,13, 80, 70, 80, 45, 15, 28, 90, 130 ,32, 20, 120, 40, 30 ,20, 6, 3 ,180],
                          [8, 44, 13 ,100 ,100, 90, 75, 25, 28 ,120, 130 ,32, 40, 160 ,40 ,60 ,55, 10, 6 ,240],
                          [3 ,6 ,4, 20 ,20 ,30, 8, 3, 12, 14, 40, 6, 3, 20, 5,0 ,5 ,3, 0, 20],
                          [5, 9 ,6, 40, 30, 40, 16 ,5 ,18, 24, 60 ,16, 11, 30 ,25,10, 13, 5, 1, 80],
                          [5 ,11 ,7, 50 ,40, 40, 19, 7 ,18 ,29, 70, 21, 17, 30, 25, 15, 25 ,5, 1, 100],
                          [5 ,11, 7, 55 ,40, 40 ,21, 9 ,18, 29 ,70, 21, 17, 35 ,25,20 ,25, 5, 2, 110],
                          [0 ,0 ,1, 10, 4, 10 ,0 ,6 ,0 ,6 ,32 ,3 ,0 ,70 ,10 ,0 ,0 ,0, 0 ,0],
                          [3, 4 ,5, 20, 14 ,20, 6 ,12, 10, 18 ,42, 9 ,12 ,100, 20,5 ,6 ,4,1 ,20],
                          [3, 6, 9 ,30 ,29 ,20, 12, 12, 10 ,30, 42,18 ,18, 110 ,20,15 ,18 ,7 ,2, 40],
                          [3 ,8, 9 ,35, 29, 20, 16, 15 ,10, 30, 42, 20, 18 ,120 ,20, 20, 22, 7, 3 ,50],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1,1,1,1,1],
                          [100 ,220, 90, 400, 300, 400, 205 ,120 ,160 ,580, 400, 140, 100, 1300, 650,320 ,480 ,80 ,60 ,2550]])
    #建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有20个背包，定义20个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    x11 = LpVariable("x11", lowBound=0, cat=LpInteger)
    x12 = LpVariable("x12", lowBound=0, cat=LpInteger)
    x13 = LpVariable("x13", lowBound=0, cat=LpInteger)
    x14 = LpVariable("x14", lowBound=0, cat=LpInteger)
    x15 = LpVariable("x15", lowBound=0, cat=LpInteger)
    x16 = LpVariable("x16", lowBound=0, cat=LpInteger)
    x17 = LpVariable("x17", lowBound=0, cat=LpInteger)
    x18 = LpVariable("x18", lowBound=0, cat=LpInteger)
    x19 = LpVariable("x19", lowBound=0, cat=LpInteger)
    x20 = LpVariable("x20", lowBound=0, cat=LpInteger)
    #有12个数组，定义12个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', '10', 'c11']
    # 约束条件
    value_st_ub=[550, 700, 130 ,240 ,280 ,310 ,110, 205, 260 ,275, 20,6120]#20是背包的总数=<20,6120是总的价值=<6120
    #建立一个循环，计算每一个背包的价值
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(
        data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5] + x7 * data[6] + x8 *
        data[7] + x9 * data[8] + x10 * data[9]+x11*data[10]+x12*data[11]+x13*data[12]+x14*data[13]+data[14]*x15+
        data[15]*x16+data[16]*x17+data[17]*x18+data[18]*x19+data[19]*x20),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
    print(m)
    #方程解
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6 - min_coe_z[6] * x7 - min_coe_z[7] * x8 - min_coe_z[8] * x9 - min_coe_z[9] * x10-min_coe_z[10]*x11-
        min_coe_z[11]*x12-min_coe_z[12]*x13-min_coe_z[13]*x14-min_coe_z[14]*x15-min_coe_z[15]*x16-min_coe_z[16]*x17-
        min_coe_z[17]*x18-min_coe_z[18]*x19-min_coe_z[19]*x20)
    #方程解的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())

#Fifth****************************************************************************************************************************************************
#建立一个类
def dynamic5():
    #设置每个背包的价值
    min_coe_z = - np.array([100, 220, 90 ,400, 300, 400 ,205, 120 ,160 ,580, 400 ,140, 100, 1300, 650,320,
                            480, 80, 60, 2550, 3100, 1100, 950, 450, 300, 220, 200, 520])
    # 建立数组，10个属性，1个最大价值和1个变量初始值
    coe_st_ub = np.array([[8, 24, 13, 80, 70, 80, 45, 15, 28, 90, 130, 32, 20, 120, 40, 30, 20, 6, 3, 180, 220, 50, 30, 50, 12, 5, 8, 18],
                          [8, 44, 13, 100, 100, 90, 75, 25, 28, 120, 130, 32, 40, 160, 40, 60, 55, 10, 6, 240, 290, 80, 90 ,70, 27, 17, 8, 28],
                          [3, 6, 4, 20, 20, 30, 8, 3, 12, 14, 40, 6, 3, 20, 5, 0, 5, 3, 0, 20, 30, 40, 10, 0, 5, 0, 0, 10],
                          [5, 9, 6, 40, 30, 40, 16, 5, 18, 24, 60, 16, 11, 30, 25, 10, 13, 5, 1, 80, 60, 50, 20, 30, 10, 5, 3, 20],
                          [ 5, 11, 7, 50, 40, 40, 19, 7, 18, 29, 70, 21, 17, 30, 25, 15, 25, 5, 1, 100, 70, 55, 20, 50, 15, 15, 6, 20],
                          [ 5, 11, 7, 55, 40, 40, 21, 9, 18, 29, 70, 21, 17 ,35, 25, 20, 25, 5, 2, 110, 70, 55, 20, 50, 20, 15, 6, 20],
                          [ 0, 0, 1, 10, 4 ,10, 0, 6, 0 ,6 ,32, 3, 0, 70, 10, 0 ,0 ,0, 0, 0 ,30, 10 ,0 ,10, 10, 5, 0 ,10],
                          [ 3, 4 ,5 ,20, 14 ,20, 6 ,12, 10 ,18 ,42, 9 ,12, 100 ,20, 5 ,6, 4 ,1 ,20, 50, 30, 5, 20, 20, 10, 10 ,20],
                          [ 3 ,6 ,9, 30 ,29, 20, 12 ,12 ,10, 30, 42, 18, 18 ,110,20 ,15 ,18, 7, 2 ,40, 60, 50, 25, 25, 25 ,15 ,10, 28],
                          [ 3, 8, 9, 35, 29, 20, 16 ,15, 10, 30, 42 ,20, 18, 120, 20 ,20, 22 ,7, 3, 50 ,60, 55, 25, 30 ,25 ,15, 10 ,28],
                          [ 1 ,1 ,1 , 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 , 1 , 1 , 1 ,1 , 1, 1, 1, 1, 1, 1, 1,1 ,1 ,1],
                          [ 100, 220, 90, 400, 300, 400, 205, 120, 160, 580, 400, 140, 100, 1300, 650, 320, 480, 80, 60, 2550, 3100, 1100, 950, 450, 300, 220, 200, 520]])

    #建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有28个背包，定义28个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    x11 = LpVariable("x11", lowBound=0, cat=LpInteger)
    x12 = LpVariable("x12", lowBound=0, cat=LpInteger)
    x13 = LpVariable("x13", lowBound=0, cat=LpInteger)
    x14 = LpVariable("x14", lowBound=0, cat=LpInteger)
    x15 = LpVariable("x15", lowBound=0, cat=LpInteger)
    x16 = LpVariable("x16", lowBound=0, cat=LpInteger)
    x17 = LpVariable("x17", lowBound=0, cat=LpInteger)
    x18 = LpVariable("x18", lowBound=0, cat=LpInteger)
    x19 = LpVariable("x19", lowBound=0, cat=LpInteger)
    x20 = LpVariable("x20", lowBound=0, cat=LpInteger)
    x21 = LpVariable("x21", lowBound=0, cat=LpInteger)
    x22 = LpVariable("x22", lowBound=0, cat=LpInteger)
    x23 = LpVariable("x23", lowBound=0, cat=LpInteger)
    x24 = LpVariable("x24", lowBound=0, cat=LpInteger)
    x25 = LpVariable("x25", lowBound=0, cat=LpInteger)
    x26 = LpVariable("x26", lowBound=0, cat=LpInteger)
    x27 = LpVariable("x27", lowBound=0, cat=LpInteger)
    x28 = LpVariable("x28", lowBound=0, cat=LpInteger)
    #有12个数组，定义12个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', '10', 'c11']
    # 约束条件
    value_st_ub=[ 930, 1210, 272, 462, 532, 572, 240, 400, 470, 490, 28, 12400]#28是背包的总数=<28,12400是总的价值=<12400
    #建立一个循环，计算每一个背包的价值
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(
        data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5] + x7 * data[6] + x8 *
        data[7] + x9 * data[8] + x10 * data[9]+x11*data[10]+x12*data[11]+x13*data[12]+x14*data[13]+data[14]*x15+
        data[15]*x16+data[16]*x17+data[17]*x18+data[18]*x19+data[19]*x20+data[20]*x21+data[21]*x22+data[22]*x23+
        data[23]*x24+data[24]*x25+data[25]*x26+data[26]*x27+data[27]*x28),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
    print(m)
    #方程解
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6 - min_coe_z[6] * x7 - min_coe_z[7] * x8 - min_coe_z[8] * x9 - min_coe_z[9] * x10-min_coe_z[10]*x11-
        min_coe_z[11]*x12-min_coe_z[12]*x13-min_coe_z[13]*x14-min_coe_z[14]*x15-min_coe_z[15]*x16-min_coe_z[16]*x17-
        min_coe_z[17]*x18-min_coe_z[18]*x19-min_coe_z[19]*x20-min_coe_z[20]*x21-min_coe_z[21]*x22-min_coe_z[22]*x23-
        min_coe_z[23]*x24-min_coe_z[24]*x25-min_coe_z[25]*x26-min_coe_z[26]*x27-min_coe_z[27]*x28)
    #方程解的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())


#Sixth***************************************************************************************************************************************************
#建立一个类
def dynamic6():
    #设置每个背包的价值
    min_coe_z = - np.array([560, 1125, 300 ,620, 2100 ,431 ,68 ,328, 47, 122, 322, 196, 41, 25, 425, 4260, 416 ,115,
                            82 ,22, 631, 132 ,420, 86, 42, 103, 215, 81, 91, 26, 49, 420,316 ,72 ,71 ,49, 108 ,116 ,90])
    # 建立数组，5个属性，1个最大价值和1个变量初始值
    coe_st_ub = np.array([[40 ,91 ,10, 30 ,160, 20, 3, 12, 3, 18, 9 ,25, 1, 1, 10, 280, 10 ,8 ,1, 1, 49 ,8 ,
                           21, 6, 1, 5 ,10 ,8 ,2, 1 ,0, 10, 42, 6, 4 ,8, 0 ,10, 1],
                          [16, 92, 41, 16, 150 ,23, 4, 18, 6, 0, 12, 8, 2, 1, 0 ,200 ,20, 6, 2 ,1 ,70, 9 ,22,
                           4, 1,5, 10, 6, 4 ,0, 4, 12, 8, 4, 3, 0, 10, 0, 6],
                          [38 ,39 ,32, 71, 80 ,26, 5 ,40, 8, 12, 30, 15, 0, 1, 23 ,100, 0 ,20 ,3, 0, 40, 6, 8 ,
                           0, 6 ,4, 22, 4 ,6, 1, 5, 14, 8 ,2, 8 ,0, 20, 0, 0],
                          [8, 71 ,30, 60, 200, 18, 6, 30, 4 ,8, 31, 6, 3, 0, 18 ,60, 21, 4, 0, 2, 32, 15, 31, 2,
                           2 ,7,8 ,2, 8 ,0 ,2, 8 ,6 ,7, 1, 0, 0 ,20 ,8],
                          [38 ,52 ,30, 42, 170, 9 ,7, 20, 0 ,3 ,21 ,4 ,1 ,2 ,14, 310, 8, 4, 6 ,1, 18 ,15, 38 ,10,
                           4, 8, 6, 0 ,0 ,3, 0, 10 ,6, 1, 3, 0, 3, 5 ,4],
                          [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,
                           1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
                          [560, 1125, 300 ,620, 2100 ,431 ,68 ,328, 47, 122, 322, 196, 41, 25, 425, 4260, 416 ,115,
                            82 ,22, 631, 132 ,420, 86, 42, 103, 215, 81, 91, 26, 49, 420,316 ,72 ,71 ,49, 108 ,116 ,90]])

    #建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有39个背包，定义39个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    x11 = LpVariable("x11", lowBound=0, cat=LpInteger)
    x12 = LpVariable("x12", lowBound=0, cat=LpInteger)
    x13 = LpVariable("x13", lowBound=0, cat=LpInteger)
    x14 = LpVariable("x14", lowBound=0, cat=LpInteger)
    x15 = LpVariable("x15", lowBound=0, cat=LpInteger)
    x16 = LpVariable("x16", lowBound=0, cat=LpInteger)
    x17 = LpVariable("x17", lowBound=0, cat=LpInteger)
    x18 = LpVariable("x18", lowBound=0, cat=LpInteger)
    x19 = LpVariable("x19", lowBound=0, cat=LpInteger)
    x20 = LpVariable("x20", lowBound=0, cat=LpInteger)
    x21 = LpVariable("x21", lowBound=0, cat=LpInteger)
    x22 = LpVariable("x22", lowBound=0, cat=LpInteger)
    x23 = LpVariable("x23", lowBound=0, cat=LpInteger)
    x24 = LpVariable("x24", lowBound=0, cat=LpInteger)
    x25 = LpVariable("x25", lowBound=0, cat=LpInteger)
    x26 = LpVariable("x26", lowBound=0, cat=LpInteger)
    x27 = LpVariable("x27", lowBound=0, cat=LpInteger)
    x28 = LpVariable("x28", lowBound=0, cat=LpInteger)
    x29 = LpVariable("x29", lowBound=0, cat=LpInteger)
    x30 = LpVariable("x30", lowBound=0, cat=LpInteger)
    x31 = LpVariable("x31", lowBound=0, cat=LpInteger)
    x32 = LpVariable("x32", lowBound=0, cat=LpInteger)
    x33 = LpVariable("x33", lowBound=0, cat=LpInteger)
    x34 = LpVariable("x34", lowBound=0, cat=LpInteger)
    x35 = LpVariable("x35", lowBound=0, cat=LpInteger)
    x36 = LpVariable("x36", lowBound=0, cat=LpInteger)
    x37 = LpVariable("x37", lowBound=0, cat=LpInteger)
    x38 = LpVariable("x38", lowBound=0, cat=LpInteger)
    x39 = LpVariable("x39", lowBound=0, cat=LpInteger)
    #有7个数组，定义7个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6']
    # 约束条件
    value_st_ub=[ 600, 500, 500, 500, 600, 39, 10618]#39是背包的总数=<39,10618是总的价值=<10618
    #建立一个循环，计算每一个背包的价值
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(
        data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5] + x7 * data[6] + x8 *
        data[7] + x9 * data[8] + x10 * data[9]+x11*data[10]+x12*data[11]+x13*data[12]+x14*data[13]+data[14]*x15+
        data[15]*x16+data[16]*x17+data[17]*x18+data[18]*x19+data[19]*x20+data[20]*x21+data[21]*x22+data[22]*x23+
        data[23]*x24+data[24]*x25+data[25]*x26+data[26]*x27+data[27]*x28+data[28]*x29+data[29]*x30+data[30]*x31+
        data[31]*x32+data[32]*x33+data[33]*x34+data[34]*x35+data[35]*x36+data[36]*x37+data[37]*x38+data[38]*x39),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
    print(m)
    #方程解
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6 - min_coe_z[6] * x7 - min_coe_z[7] * x8 - min_coe_z[8] * x9 - min_coe_z[9] * x10-min_coe_z[10]*x11-
        min_coe_z[11]*x12-min_coe_z[12]*x13-min_coe_z[13]*x14-min_coe_z[14]*x15-min_coe_z[15]*x16-min_coe_z[16]*x17-
        min_coe_z[17]*x18-min_coe_z[18]*x19-min_coe_z[19]*x20-min_coe_z[20]*x21-min_coe_z[21]*x22-min_coe_z[22]*x23-
        min_coe_z[23]*x24-min_coe_z[24]*x25-min_coe_z[25]*x26-min_coe_z[26]*x27-min_coe_z[27]*x28-min_coe_z[28]*x29-
        min_coe_z[29]*x30-min_coe_z[30]*x31-min_coe_z[31]*x32-min_coe_z[32]*x33-min_coe_z[33]*x34-min_coe_z[34]*x35-
        min_coe_z[35]*x36-min_coe_z[36]*x37-min_coe_z[37]*x38-min_coe_z[38]*x39)
    #方程解的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())

#Seventh***************************************************************************************************************************************************
#建立一个类
def dynamic7():
    #设置每个背包的价值
    min_coe_z = - np.array([560, 1125, 300, 620, 2100 ,431, 68 ,328, 47 ,122, 322, 196, 41, 25, 425 ,4260, 416, 115,
                            82,22 ,631, 132, 420, 86, 42 ,103, 215, 81, 91, 26 ,49, 420, 316 ,72 ,71 ,49, 108 ,116 ,
                            90, 738, 1811 ,430 ,3060, 215, 58 ,296 ,620, 418, 47 ,81])
    # 建立数组，5个属性，1个最大价值和1个变量初始值
    coe_st_ub = np.array([[40, 91, 10 ,30 ,160 ,20, 3 ,12 ,3 ,18, 9 ,25 ,1 ,1 ,10, 280, 10 ,8 ,1 ,1, 49, 8, 21,
                          6 ,1, 5, 10, 8, 2, 1, 0, 10, 42, 6, 4 ,8 ,0 ,10, 1, 40, 86, 11, 120, 8, 3, 32, 28, 13, 2, 4],
                         [16 ,92 ,41, 16, 150, 23, 4, 18 ,6, 0, 12, 8 ,2, 1 ,0, 200, 20 ,6 ,2, 1 ,70, 9, 22, 4,
                          1, 5, 10, 6, 4, 0, 4, 12, 8, 4, 3, 0, 10 ,0, 6, 28 ,93, 9, 30 ,22, 0, 36, 45, 13, 2, 2],
                         [38, 39, 32, 71 ,80, 26, 5, 40, 8, 12, 30, 15, 0 ,1 ,23, 100, 0, 20, 3, 0, 40, 6, 8, 0,
                          6, 4, 22, 4 ,6 ,1, 5, 14, 8,2, 8, 0, 20, 0, 0, 6, 12, 6, 80, 13, 6, 22, 14, 0, 1, 2],
                         [ 8, 71 ,30, 60 ,200 ,18, 6, 30, 4, 8, 31, 6, 3 ,0, 18, 60, 21, 4, 0 ,2, 32, 15 ,31 ,2 ,
                           2, 7, 8 ,2, 8, 0, 2, 8, 6, 7, 1, 0, 0, 20, 8, 14 ,20, 2, 40, 6, 1, 14, 20, 12, 0, 1],
                         [38, 52, 30 ,42, 170, 9, 7, 20, 0, 3, 21, 4, 1, 2, 14 ,310, 8 ,4 ,6, 1 ,18, 15 ,38 ,10,
                          4 ,8,6 ,0 ,0,3, 0, 10, 6, 1, 3, 0, 3, 5 ,4 ,0, 30, 12, 16, 18, 3 ,16, 22, 30, 4 ,0],
                         [1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,
                           1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1 ,1],
                         [560, 1125, 300, 620, 2100 ,431, 68 ,328, 47 ,122, 322, 196, 41, 25, 425 ,4260, 416, 115,
                          82,22 ,631, 132, 420, 86, 42 ,103, 215, 81, 91, 26 ,49, 420, 316 ,72 ,71 ,49, 108 ,116 ,
                          90, 738, 1811 ,430 ,3060, 215, 58 ,296 ,620, 418, 47 ,81 ]])

    #建立一个模型
    m = LpProblem(name="MIP Model", sense=LpMaximize)
    # 有39个背包，定义39个变量
    x1 = LpVariable("x1", lowBound=0, cat=LpInteger)
    x2 = LpVariable("x2", lowBound=0, cat=LpInteger)
    x3 = LpVariable("x3", lowBound=0, cat=LpInteger)
    x4 = LpVariable("x4", lowBound=0, cat=LpInteger)
    x5 = LpVariable("x5", lowBound=0, cat=LpInteger)
    x6 = LpVariable("x6", lowBound=0, cat=LpInteger)
    x7 = LpVariable("x7", lowBound=0, cat=LpInteger)
    x8 = LpVariable("x8", lowBound=0, cat=LpInteger)
    x9 = LpVariable("x9", lowBound=0, cat=LpInteger)
    x10 = LpVariable("x10", lowBound=0, cat=LpInteger)
    x11 = LpVariable("x11", lowBound=0, cat=LpInteger)
    x12 = LpVariable("x12", lowBound=0, cat=LpInteger)
    x13 = LpVariable("x13", lowBound=0, cat=LpInteger)
    x14 = LpVariable("x14", lowBound=0, cat=LpInteger)
    x15 = LpVariable("x15", lowBound=0, cat=LpInteger)
    x16 = LpVariable("x16", lowBound=0, cat=LpInteger)
    x17 = LpVariable("x17", lowBound=0, cat=LpInteger)
    x18 = LpVariable("x18", lowBound=0, cat=LpInteger)
    x19 = LpVariable("x19", lowBound=0, cat=LpInteger)
    x20 = LpVariable("x20", lowBound=0, cat=LpInteger)
    x21 = LpVariable("x21", lowBound=0, cat=LpInteger)
    x22 = LpVariable("x22", lowBound=0, cat=LpInteger)
    x23 = LpVariable("x23", lowBound=0, cat=LpInteger)
    x24 = LpVariable("x24", lowBound=0, cat=LpInteger)
    x25 = LpVariable("x25", lowBound=0, cat=LpInteger)
    x26 = LpVariable("x26", lowBound=0, cat=LpInteger)
    x27 = LpVariable("x27", lowBound=0, cat=LpInteger)
    x28 = LpVariable("x28", lowBound=0, cat=LpInteger)
    x29 = LpVariable("x29", lowBound=0, cat=LpInteger)
    x30 = LpVariable("x30", lowBound=0, cat=LpInteger)
    x31 = LpVariable("x31", lowBound=0, cat=LpInteger)
    x32 = LpVariable("x32", lowBound=0, cat=LpInteger)
    x33 = LpVariable("x33", lowBound=0, cat=LpInteger)
    x34 = LpVariable("x34", lowBound=0, cat=LpInteger)
    x35 = LpVariable("x35", lowBound=0, cat=LpInteger)
    x36 = LpVariable("x36", lowBound=0, cat=LpInteger)
    x37 = LpVariable("x37", lowBound=0, cat=LpInteger)
    x38 = LpVariable("x38", lowBound=0, cat=LpInteger)
    x39 = LpVariable("x39", lowBound=0, cat=LpInteger)
    x40 = LpVariable("x40", lowBound=0, cat=LpInteger)
    x41 = LpVariable("x41", lowBound=0, cat=LpInteger)
    x42 = LpVariable("x42", lowBound=0, cat=LpInteger)
    x43 = LpVariable("x43", lowBound=0, cat=LpInteger)
    x44 = LpVariable("x44", lowBound=0, cat=LpInteger)
    x45 = LpVariable("x45", lowBound=0, cat=LpInteger)
    x46 = LpVariable("x46", lowBound=0, cat=LpInteger)
    x47 = LpVariable("x47", lowBound=0, cat=LpInteger)
    x48 = LpVariable("x48", lowBound=0, cat=LpInteger)
    x49 = LpVariable("x49", lowBound=0, cat=LpInteger)
    x50 = LpVariable("x50", lowBound=0, cat=LpInteger)
    #有7个数组，定义7个方程
    a = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6']
    # 约束条件
    value_st_ub=[ 800, 650, 550 ,550, 650 ,50, 16537]
    #建立一个循环，计算每一个背包的价值
    for i in range(0, len(coe_st_ub)):
        data = coe_st_ub[i]
        aa = a[i]
        m += LpConstraint(e=(
        data[0] * x1 + data[1] * x2 + data[2] * x3 + data[3] * x4 + data[4] * x5 + x6 * data[5] + x7 * data[6] + x8 *
        data[7] + x9 * data[8] + x10 * data[9]+x11*data[10]+x12*data[11]+x13*data[12]+x14*data[13]+data[14]*x15+
        data[15]*x16+data[16]*x17+data[17]*x18+data[18]*x19+data[19]*x20+data[20]*x21+data[21]*x22+data[22]*x23+
        data[23]*x24+data[24]*x25+data[25]*x26+data[26]*x27+data[27]*x28+data[28]*x29+data[29]*x30+data[30]*x31+
        data[31]*x32+data[32]*x33+data[33]*x34+data[34]*x35+data[35]*x36+data[36]*x37+data[37]*x38+data[38]*x39+
        data[39]*x40+data[40]*x41+data[41]*x42+data[42]*x43+data[43]*x44+data[44]*x45+data[45]*x46+data[46]*x47+
        data[47]*x48+data[48]*x49+data[49]*x50),
                          sense=LpConstraintLE, rhs=value_st_ub[i],
                          name=aa)
    print(m)
    #方程解
    m.setObjective(
        -min_coe_z[0] * x1 - min_coe_z[1] * x2 - min_coe_z[2] * x3 - min_coe_z[3] * x4 - min_coe_z[4] * x5 - min_coe_z[
            5] * x6 - min_coe_z[6] * x7 - min_coe_z[7] * x8 - min_coe_z[8] * x9 - min_coe_z[9] * x10-min_coe_z[10]*x11-
        min_coe_z[11]*x12-min_coe_z[12]*x13-min_coe_z[13]*x14-min_coe_z[14]*x15-min_coe_z[15]*x16-min_coe_z[16]*x17-
        min_coe_z[17]*x18-min_coe_z[18]*x19-min_coe_z[19]*x20-min_coe_z[20]*x21-min_coe_z[21]*x22-min_coe_z[22]*x23-
        min_coe_z[23]*x24-min_coe_z[24]*x25-min_coe_z[25]*x26-min_coe_z[26]*x27-min_coe_z[27]*x28-min_coe_z[28]*x29-
        min_coe_z[29]*x30-min_coe_z[30]*x31-min_coe_z[31]*x32-min_coe_z[32]*x33-min_coe_z[33]*x34-min_coe_z[34]*x35-
        min_coe_z[35]*x36-min_coe_z[36]*x37-min_coe_z[37]*x38-min_coe_z[38]*x39-min_coe_z[39]*x40-min_coe_z[40]*x41-
        min_coe_z[41]*x42-min_coe_z[42]*x43-min_coe_z[43]*x44-min_coe_z[44]*x45-min_coe_z[45]*x46-min_coe_z[46]*x47-
        min_coe_z[47]*x48-min_coe_z[48]*x49-min_coe_z[49]*x50)
    #方程解的最小最大值
    status = m.solve()
    if LpStatus[status] == 'Optimal':

        for v in m.variables():
            print('%s %g' % (v.name, v.varValue))
    print('Obj: %g' % m.objective.value())

if __name__ == '__main__':
    dynamic1()
    dynamic2()
    dynamic3()
    dynamic4()
    dynamic5()
    dynamic6()
    dynamic7()
